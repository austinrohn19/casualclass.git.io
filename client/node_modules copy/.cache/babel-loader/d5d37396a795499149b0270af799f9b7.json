{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Austin\\\\OneDrive\\\\youtube-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"C:\\\\Users\\\\Austin\\\\OneDrive\\\\youtube-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { SUCCESS } from '../actions';\nimport { WATCH_DETAILS } from '../actions/watch';\nimport { COMMENT_THREAD_LIST_RESPONSE } from '../api/youtube-api-response-types';\nimport { createSelector } from 'reselect';\nimport { COMMENT_THREAD } from '../actions/comment';\nimport { getSearchParam } from '../../services/url';\nvar initialState = {\n  byVideo: {},\n  byId: {}\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case COMMENT_THREAD[SUCCESS]:\n      return reduceCommentThread(action.response, action.videoId, state);\n\n    case WATCH_DETAILS[SUCCESS]:\n      return reduceWatchDetails(action.response, action.videoId, state);\n\n    default:\n      return state;\n  }\n}\n\nfunction reduceWatchDetails(responses, videoId, prevState) {\n  var commentThreadResponse = responses.find(function (res) {\n    return res.result.kind === COMMENT_THREAD_LIST_RESPONSE;\n  });\n  return reduceCommentThread(commentThreadResponse.result, videoId, prevState);\n}\n\nfunction reduceCommentThread(response, videoId, prevState) {\n  if (!response) {\n    return prevState;\n  }\n\n  var newComments = response.items.reduce(function (acc, item) {\n    acc[item.id] = item;\n    return acc;\n  }, {}); // if we have already fetched some comments for a particular video\n  // we just append the ids for the new comments\n\n  var prevCommentIds = prevState.byVideo[videoId] ? prevState.byVideo[videoId].ids : [];\n  var commentIds = [].concat(_toConsumableArray(prevCommentIds), _toConsumableArray(Object.keys(newComments)));\n  var byVideoComment = {\n    nextPageToken: response.nextPageToken,\n    ids: commentIds\n  };\n  return _objectSpread(_objectSpread({}, prevState), {}, {\n    byId: _objectSpread(_objectSpread({}, prevState.byId), newComments),\n    byVideo: _objectSpread(_objectSpread({}, prevState.byVideo), {}, {\n      [videoId]: byVideoComment\n    })\n  });\n}\n/*\r\n* Selectors\r\n */\n\n\nvar getCommentIdsForVideo = function getCommentIdsForVideo(state, videoId) {\n  var comment = state.comments.byVideo[videoId];\n\n  if (comment) {\n    return comment.ids;\n  }\n\n  return [];\n};\n\nexport var getCommentsForVideo = createSelector(getCommentIdsForVideo, function (state) {\n  return state.comments.byId;\n}, function (commentIds, allComments) {\n  return commentIds.map(function (commentId) {\n    return allComments[commentId];\n  });\n});\n\nvar getComment = function getComment(state, location) {\n  var videoId = getSearchParam(location, 'v');\n  return state.comments.byVideo[videoId];\n};\n\nexport var getCommentNextPageToken = createSelector(getComment, function (comment) {\n  return comment ? comment.nextPageToken : null;\n});","map":{"version":3,"sources":["C:/Users/Austin/OneDrive/youtube-react/src/store/reducers/comments.js"],"names":["SUCCESS","WATCH_DETAILS","COMMENT_THREAD_LIST_RESPONSE","createSelector","COMMENT_THREAD","getSearchParam","initialState","byVideo","byId","state","action","type","reduceCommentThread","response","videoId","reduceWatchDetails","responses","prevState","commentThreadResponse","find","res","result","kind","newComments","items","reduce","acc","item","id","prevCommentIds","ids","commentIds","Object","keys","byVideoComment","nextPageToken","getCommentIdsForVideo","comment","comments","getCommentsForVideo","allComments","map","commentId","getComment","location","getCommentNextPageToken"],"mappings":"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","sourcesContent":["import {SUCCESS} from '../actions';\r\nimport {WATCH_DETAILS} from '../actions/watch';\r\nimport {COMMENT_THREAD_LIST_RESPONSE} from '../api/youtube-api-response-types';\r\nimport {createSelector} from 'reselect';\r\nimport {COMMENT_THREAD} from '../actions/comment';\r\nimport {getSearchParam} from '../../services/url';\r\n\r\nconst initialState = {\r\n  byVideo: {},\r\n  byId: {},\r\n};\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case COMMENT_THREAD[SUCCESS]:\r\n      return reduceCommentThread(action.response, action.videoId, state);\r\n    case WATCH_DETAILS[SUCCESS]:\r\n      return reduceWatchDetails(action.response, action.videoId, state);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction reduceWatchDetails(responses, videoId, prevState) {\r\n  const commentThreadResponse = responses.find(res => res.result.kind === COMMENT_THREAD_LIST_RESPONSE);\r\n  return reduceCommentThread(commentThreadResponse.result, videoId, prevState);\r\n}\r\n\r\nfunction reduceCommentThread(response, videoId, prevState) {\r\n  if (!response) {\r\n    return prevState;\r\n  }\r\n  const newComments = response.items.reduce((acc, item) => {\r\n    acc[item.id] = item;\r\n    return acc;\r\n  }, {});\r\n\r\n  // if we have already fetched some comments for a particular video\r\n  // we just append the ids for the new comments\r\n  const prevCommentIds = prevState.byVideo[videoId] ? prevState.byVideo[videoId].ids : [];\r\n  const commentIds = [...prevCommentIds, ...Object.keys(newComments)];\r\n\r\n  const byVideoComment = {\r\n    nextPageToken: response.nextPageToken,\r\n    ids: commentIds,\r\n  };\r\n\r\n  return {\r\n    ...prevState,\r\n    byId: {\r\n      ...prevState.byId,\r\n      ...newComments,\r\n    },\r\n    byVideo: {\r\n      ...prevState.byVideo,\r\n      [videoId]: byVideoComment,\r\n    }\r\n  };\r\n}\r\n\r\n/*\r\n* Selectors\r\n */\r\nconst getCommentIdsForVideo = (state, videoId) => {\r\n  const comment = state.comments.byVideo[videoId];\r\n  if (comment) {\r\n    return comment.ids;\r\n  }\r\n  return [];\r\n};\r\nexport const getCommentsForVideo = createSelector(\r\n  getCommentIdsForVideo,\r\n  state => state.comments.byId,\r\n  (commentIds, allComments) => {\r\n    return commentIds.map(commentId => allComments[commentId]);\r\n  }\r\n);\r\n\r\nconst getComment = (state, location) => {\r\n  const videoId = getSearchParam(location, 'v');\r\n  return state.comments.byVideo[videoId];\r\n};\r\nexport const getCommentNextPageToken = createSelector(\r\n  getComment,\r\n  (comment) => {\r\n    return comment ? comment.nextPageToken : null;\r\n  }\r\n);"]},"metadata":{},"sourceType":"module"}