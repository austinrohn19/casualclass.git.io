{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Austin\\\\OneDrive\\\\youtube-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { VIDEO_DETAILS, WATCH_DETAILS } from '../actions/watch';\nimport { SUCCESS } from '../actions';\nimport { CHANNEL_LIST_RESPONSE } from '../api/youtube-api-response-types';\nvar initialState = {\n  byId: {}\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case WATCH_DETAILS[SUCCESS]:\n      return reduceWatchDetails(action.response, state);\n\n    case VIDEO_DETAILS[SUCCESS]:\n      return reduceVideoDetails(action.response, state);\n\n    default:\n      return state;\n  }\n}\n\nfunction reduceWatchDetails(responses, prevState) {\n  var channelResponse = responses.find(function (response) {\n    return response.result.kind === CHANNEL_LIST_RESPONSE;\n  });\n  var channels = {};\n\n  if (channelResponse && channelResponse.result.items) {\n    // we know that there will only be one item\n    // because we ask for a channel with a specific id\n    var channel = channelResponse.result.items[0];\n    channels[channel.id] = channel;\n  }\n\n  return _objectSpread(_objectSpread({}, prevState), {}, {\n    byId: _objectSpread(_objectSpread({}, prevState.byId), channels)\n  });\n}\n\nfunction reduceVideoDetails(responses, prevState) {\n  var channelResponse = responses.find(function (response) {\n    return response.result.kind === CHANNEL_LIST_RESPONSE;\n  });\n  var channelEntry = {};\n\n  if (channelResponse && channelResponse.result.items) {\n    // we're explicitly asking for a channel with a particular id\n    // so the response set must either contain 0 items (if a channel with the specified id does not exist)\n    // or at most one item (i.e. the channel we've been asking for)\n    var channel = channelResponse.result.items[0];\n    channelEntry = {\n      [channel.id]: channel\n    };\n  }\n\n  return _objectSpread(_objectSpread({}, prevState), {}, {\n    byId: _objectSpread(_objectSpread({}, prevState.byId), channelEntry)\n  });\n}\n/*\r\n*   Selectors\r\n* */\n\n\nexport var getChannel = function getChannel(state, channelId) {\n  if (!channelId) return null;\n  return state.channels.byId[channelId];\n};","map":{"version":3,"sources":["C:/Users/Austin/OneDrive/youtube-react/src/store/reducers/channels.js"],"names":["VIDEO_DETAILS","WATCH_DETAILS","SUCCESS","CHANNEL_LIST_RESPONSE","initialState","byId","state","action","type","reduceWatchDetails","response","reduceVideoDetails","responses","prevState","channelResponse","find","result","kind","channels","items","channel","id","channelEntry","getChannel","channelId"],"mappings":";AAAA,SAAQA,aAAR,EAAuBC,aAAvB,QAA2C,kBAA3C;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,SAAQC,qBAAR,QAAoC,mCAApC;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AADa,CAArB;AAIA,eAAe,YAAwC;AAAA,MAA9BC,KAA8B,uEAAtBF,YAAsB;AAAA,MAARG,MAAQ;;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,aAAa,CAACC,OAAD,CAAlB;AACE,aAAOO,kBAAkB,CAACF,MAAM,CAACG,QAAR,EAAkBJ,KAAlB,CAAzB;;AACF,SAAKN,aAAa,CAACE,OAAD,CAAlB;AACE,aAAOS,kBAAkB,CAACJ,MAAM,CAACG,QAAR,EAAkBJ,KAAlB,CAAzB;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD;;AAED,SAASG,kBAAT,CAA4BG,SAA5B,EAAuCC,SAAvC,EAAkD;AAChD,MAAMC,eAAe,GAAGF,SAAS,CAACG,IAAV,CAAe,UAAAL,QAAQ;AAAA,WAAIA,QAAQ,CAACM,MAAT,CAAgBC,IAAhB,KAAyBd,qBAA7B;AAAA,GAAvB,CAAxB;AACA,MAAIe,QAAQ,GAAG,EAAf;;AACA,MAAIJ,eAAe,IAAIA,eAAe,CAACE,MAAhB,CAAuBG,KAA9C,EAAqD;AACnD;AACA;AACA,QAAMC,OAAO,GAAGN,eAAe,CAACE,MAAhB,CAAuBG,KAAvB,CAA6B,CAA7B,CAAhB;AACAD,IAAAA,QAAQ,CAACE,OAAO,CAACC,EAAT,CAAR,GAAuBD,OAAvB;AACD;;AACD,yCACKP,SADL;AAEER,IAAAA,IAAI,kCACCQ,SAAS,CAACR,IADX,GAECa,QAFD;AAFN;AAOD;;AAED,SAASP,kBAAT,CAA4BC,SAA5B,EAAuCC,SAAvC,EAAkD;AAChD,MAAMC,eAAe,GAAGF,SAAS,CAACG,IAAV,CAAe,UAAAL,QAAQ;AAAA,WAAIA,QAAQ,CAACM,MAAT,CAAgBC,IAAhB,KAAyBd,qBAA7B;AAAA,GAAvB,CAAxB;AACA,MAAImB,YAAY,GAAG,EAAnB;;AACA,MAAIR,eAAe,IAAIA,eAAe,CAACE,MAAhB,CAAuBG,KAA9C,EAAqD;AACnD;AACA;AACA;AACA,QAAMC,OAAO,GAAGN,eAAe,CAACE,MAAhB,CAAuBG,KAAvB,CAA6B,CAA7B,CAAhB;AACAG,IAAAA,YAAY,GAAI;AACd,OAACF,OAAO,CAACC,EAAT,GAAcD;AADA,KAAhB;AAGD;;AAED,yCACKP,SADL;AAEER,IAAAA,IAAI,kCACCQ,SAAS,CAACR,IADX,GAECiB,YAFD;AAFN;AAOD;AAED;;;;;AAGA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACjB,KAAD,EAAQkB,SAAR,EAAsB;AAC9C,MAAI,CAACA,SAAL,EAAgB,OAAO,IAAP;AAChB,SAAOlB,KAAK,CAACY,QAAN,CAAeb,IAAf,CAAoBmB,SAApB,CAAP;AACD,CAHM","sourcesContent":["import {VIDEO_DETAILS, WATCH_DETAILS} from '../actions/watch';\r\nimport {SUCCESS} from '../actions';\r\nimport {CHANNEL_LIST_RESPONSE} from '../api/youtube-api-response-types';\r\n\r\nconst initialState = {\r\n  byId: {}\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case WATCH_DETAILS[SUCCESS]:\r\n      return reduceWatchDetails(action.response, state);\r\n    case VIDEO_DETAILS[SUCCESS]:\r\n      return reduceVideoDetails(action.response, state);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction reduceWatchDetails(responses, prevState) {\r\n  const channelResponse = responses.find(response => response.result.kind === CHANNEL_LIST_RESPONSE);\r\n  let channels = {};\r\n  if (channelResponse && channelResponse.result.items) {\r\n    // we know that there will only be one item\r\n    // because we ask for a channel with a specific id\r\n    const channel = channelResponse.result.items[0];\r\n    channels[channel.id] = channel;\r\n  }\r\n  return {\r\n    ...prevState,\r\n    byId: {\r\n      ...prevState.byId,\r\n      ...channels\r\n    }\r\n  };\r\n}\r\n\r\nfunction reduceVideoDetails(responses, prevState) {\r\n  const channelResponse = responses.find(response => response.result.kind === CHANNEL_LIST_RESPONSE);\r\n  let channelEntry = {};\r\n  if (channelResponse && channelResponse.result.items) {\r\n    // we're explicitly asking for a channel with a particular id\r\n    // so the response set must either contain 0 items (if a channel with the specified id does not exist)\r\n    // or at most one item (i.e. the channel we've been asking for)\r\n    const channel = channelResponse.result.items[0];\r\n    channelEntry =  {\r\n      [channel.id]: channel,\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...prevState,\r\n    byId: {\r\n      ...prevState.byId,\r\n      ...channelEntry,\r\n    }\r\n  };\r\n}\r\n\r\n/*\r\n*   Selectors\r\n* */\r\nexport const getChannel = (state, channelId) => {\r\n  if (!channelId) return null;\r\n  return state.channels.byId[channelId];\r\n};"]},"metadata":{},"sourceType":"module"}