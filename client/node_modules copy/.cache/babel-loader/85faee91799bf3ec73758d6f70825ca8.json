{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\Austin\\\\OneDrive\\\\youtube-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"C:\\\\Users\\\\Austin\\\\OneDrive\\\\youtube-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import{MOST_POPULAR,MOST_POPULAR_BY_CATEGORY,VIDEO_CATEGORIES}from'../actions/video';import{SUCCESS}from'../actions';import{createSelector}from'reselect';import{SEARCH_LIST_RESPONSE,VIDEO_LIST_RESPONSE}from'../api/youtube-api-response-types';import{VIDEO_DETAILS,WATCH_DETAILS}from'../actions/watch';import{getSearchParam}from'../../services/url';export var initialState={byId:{},mostPopular:{},categories:{},byCategory:{},related:{}};export default function videos(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case MOST_POPULAR[SUCCESS]:return reduceFetchMostPopularVideos(action.response,state);case VIDEO_CATEGORIES[SUCCESS]:return reduceFetchVideoCategories(action.response,state);case MOST_POPULAR_BY_CATEGORY[SUCCESS]:return reduceFetchMostPopularVideosByCategory(action.response,action.categories,state);case WATCH_DETAILS[SUCCESS]:return reduceWatchDetails(action.response,state);case VIDEO_DETAILS[SUCCESS]:return reduceVideoDetails(action.response,state);default:return state;}}function reduceFetchMostPopularVideos(response,prevState){var videoMap=response.items.reduce(function(accumulator,video){accumulator[video.id]=video;return accumulator;},{});var items=Object.keys(videoMap);if(response.hasOwnProperty('prevPageToken')&&prevState.mostPopular){items=[].concat(_toConsumableArray(prevState.mostPopular.items),_toConsumableArray(items));}var mostPopular={totalResults:response.pageInfo.totalResults,nextPageToken:response.nextPageToken,items};return _objectSpread(_objectSpread({},prevState),{},{mostPopular,byId:_objectSpread(_objectSpread({},prevState.byId),videoMap)});}function reduceFetchVideoCategories(response,prevState){var categoryMapping=response.items.reduce(function(accumulator,category){accumulator[category.id]=category.snippet.title;return accumulator;},{});return _objectSpread(_objectSpread({},prevState),{},{categories:categoryMapping});}function reduceFetchMostPopularVideosByCategory(responses,categories,prevState){var videoMap={};var byCategoryMap={};responses.forEach(function(response,index){// ignore answer if there was an error\nif(response.status===400)return;var categoryId=categories[index];var _groupVideosByIdAndCa=groupVideosByIdAndCategory(response.result),byId=_groupVideosByIdAndCa.byId,byCategory=_groupVideosByIdAndCa.byCategory;videoMap=_objectSpread(_objectSpread({},videoMap),byId);byCategoryMap[categoryId]=byCategory;});// compute new state\nreturn _objectSpread(_objectSpread({},prevState),{},{byId:_objectSpread(_objectSpread({},prevState.byId),videoMap),byCategory:_objectSpread(_objectSpread({},prevState.byCategory),byCategoryMap)});}function groupVideosByIdAndCategory(response){var videos=response.items;var byId={};var byCategory={totalResults:response.pageInfo.totalResults,nextPageToken:response.nextPageToken,items:[]};videos.forEach(function(video){byId[video.id]=video;var items=byCategory.items;if(items&&items){items.push(video.id);}else{byCategory.items=[video.id];}});return{byId,byCategory};}function reduceWatchDetails(responses,prevState){var videoDetailResponse=responses.find(function(r){return r.result.kind===VIDEO_LIST_RESPONSE;});// we know that items will only have one element\n// because we explicitly asked for a video with a specific id\nvar video=videoDetailResponse.result.items[0];var relatedEntry=reduceRelatedVideosRequest(responses);return _objectSpread(_objectSpread({},prevState),{},{byId:_objectSpread(_objectSpread({},prevState.byId),{},{[video.id]:video}),related:_objectSpread(_objectSpread({},prevState.related),{},{[video.id]:relatedEntry})});}function reduceRelatedVideosRequest(responses){var relatedVideosResponse=responses.find(function(r){return r.result.kind===SEARCH_LIST_RESPONSE;});var _relatedVideosRespons=relatedVideosResponse.result,pageInfo=_relatedVideosRespons.pageInfo,items=_relatedVideosRespons.items,nextPageToken=_relatedVideosRespons.nextPageToken;var relatedVideoIds=items.map(function(video){return video.id.videoId;});return{totalResults:pageInfo.totalResults,nextPageToken,items:relatedVideoIds};}function reduceVideoDetails(responses,prevState){var videoResponses=responses.filter(function(response){return response.result.kind===VIDEO_LIST_RESPONSE;});var parsedVideos=videoResponses.reduce(function(videoMap,response){// we're explicitly asking for a video with a particular id\n// so the response set must either contain 0 items (if a video with the id does not exist)\n// or at most one item (i.e. the channel we've been asking for)\nvar video=response.result.items?response.result.items[0]:null;if(!video){return videoMap;}videoMap[video.id]=video;return videoMap;},{});return _objectSpread(_objectSpread({},prevState),{},{byId:_objectSpread(_objectSpread({},prevState.byId),parsedVideos)});}/* function reduceVideoDetails(responses) {\r\n  const videoResponses = responses.filter(response => response.result.kind === VIDEO_LIST_RESPONSE);\r\n  return videoResponses.reduce((accumulator, response) => {\r\n    response.result.items.forEach(video => {\r\n      accumulator[video.id] = video;\r\n    });\r\n    return accumulator;\r\n  }, {});\r\n}\r\n\r\nfunction reduceRelatedVideos(responses, videoIds) {\r\n  const videoResponses = responses.filter(response => response.result.kind === SEARCH_LIST_RESPONSE);\r\n  return videoResponses.reduce((accumulator, response, index) => {\r\n    const relatedIds = response.result.items.map(video => video.id.videoId);\r\n    accumulator[videoIds[index]] = {\r\n      totalResults: response.result.pageInfo.totalResults,\r\n      nextPageToken: response.result.nextPageToken,\r\n      items: relatedIds\r\n    };\r\n    return accumulator;\r\n  }, {});\r\n} */ /*\r\n*   Selectors\r\n* */var getMostPopular=function getMostPopular(state){return state.videos.mostPopular;};export var getMostPopularVideos=createSelector(function(state){return state.videos.byId;},getMostPopular,function(videosById,mostPopular){if(!mostPopular||!mostPopular.items){return[];}return mostPopular.items.map(function(videoId){return videosById[videoId];});});export var getVideoCategoryIds=createSelector(function(state){return state.videos.categories;},function(categories){return Object.keys(categories||{});});export var getVideosByCategory=createSelector(function(state){return state.videos.byCategory;},function(state){return state.videos.byId;},function(state){return state.videos.categories;},function(videosByCategory,videosById,categories){return Object.keys(videosByCategory||{}).reduce(function(accumulator,categoryId){var videoIds=videosByCategory[categoryId].items;var categoryTitle=categories[categoryId];accumulator[categoryTitle]=videoIds.map(function(videoId){return videosById[videoId];});return accumulator;},{});});export var videoCategoriesLoaded=createSelector(function(state){return state.videos.categories;},function(categories){return Object.keys(categories||{}).length!==0;});export var videosByCategoryLoaded=createSelector(function(state){return state.videos.byCategory;},function(videosByCategory){return Object.keys(videosByCategory||{}).length;});export var getVideoById=function getVideoById(state,videoId){return state.videos.byId[videoId];};var getRelatedVideoIds=function getRelatedVideoIds(state,videoId){var related=state.videos.related[videoId];return related?related.items:[];};export var getRelatedVideos=createSelector(getRelatedVideoIds,function(state){return state.videos.byId;},function(relatedVideoIds,videos){if(relatedVideoIds){// filter kicks out null values we might have\nreturn relatedVideoIds.map(function(videoId){return videos[videoId];}).filter(function(video){return video;});}return[];});export var getChannelId=function getChannelId(state,location,name){var videoId=getSearchParam(location,name);var video=state.videos.byId[videoId];if(video){return video.snippet.channelId;}return null;};export var getAmountComments=createSelector(getVideoById,function(video){if(video){return video.statistics.commentCount;}return 0;});export var allMostPopularVideosLoaded=createSelector([getMostPopular],function(mostPopular){var amountFetchedItems=mostPopular.items?mostPopular.items.length:0;return amountFetchedItems===mostPopular.totalResults;});export var getMostPopularVideosNextPageToken=createSelector([getMostPopular],function(mostPopular){return mostPopular.nextPageToken;});","map":{"version":3,"sources":["C:/Users/Austin/OneDrive/youtube-react/src/store/reducers/videos.js"],"names":["MOST_POPULAR","MOST_POPULAR_BY_CATEGORY","VIDEO_CATEGORIES","SUCCESS","createSelector","SEARCH_LIST_RESPONSE","VIDEO_LIST_RESPONSE","VIDEO_DETAILS","WATCH_DETAILS","getSearchParam","initialState","byId","mostPopular","categories","byCategory","related","videos","state","action","type","reduceFetchMostPopularVideos","response","reduceFetchVideoCategories","reduceFetchMostPopularVideosByCategory","reduceWatchDetails","reduceVideoDetails","prevState","videoMap","items","reduce","accumulator","video","id","Object","keys","hasOwnProperty","totalResults","pageInfo","nextPageToken","categoryMapping","category","snippet","title","responses","byCategoryMap","forEach","index","status","categoryId","groupVideosByIdAndCategory","result","push","videoDetailResponse","find","r","kind","relatedEntry","reduceRelatedVideosRequest","relatedVideosResponse","relatedVideoIds","map","videoId","videoResponses","filter","parsedVideos","getMostPopular","getMostPopularVideos","videosById","getVideoCategoryIds","getVideosByCategory","videosByCategory","videoIds","categoryTitle","videoCategoriesLoaded","length","videosByCategoryLoaded","getVideoById","getRelatedVideoIds","getRelatedVideos","getChannelId","location","name","channelId","getAmountComments","statistics","commentCount","allMostPopularVideosLoaded","amountFetchedItems","getMostPopularVideosNextPageToken"],"mappings":"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","sourcesContent":["import {MOST_POPULAR, MOST_POPULAR_BY_CATEGORY, VIDEO_CATEGORIES} from '../actions/video';\r\nimport {SUCCESS} from '../actions';\r\nimport {createSelector} from 'reselect';\r\nimport {SEARCH_LIST_RESPONSE, VIDEO_LIST_RESPONSE} from '../api/youtube-api-response-types';\r\nimport {VIDEO_DETAILS, WATCH_DETAILS} from '../actions/watch';\r\nimport {getSearchParam} from '../../services/url';\r\n\r\nexport const initialState = {\r\n  byId: {},\r\n  mostPopular: {},\r\n  categories: {},\r\n  byCategory: {},\r\n  related: {},\r\n};\r\nexport default function videos(state = initialState, action) {\r\n  switch (action.type) {\r\n    case MOST_POPULAR[SUCCESS]:\r\n      return reduceFetchMostPopularVideos(action.response, state);\r\n    case VIDEO_CATEGORIES[SUCCESS]:\r\n      return reduceFetchVideoCategories(action.response, state);\r\n    case MOST_POPULAR_BY_CATEGORY[SUCCESS]:\r\n      return reduceFetchMostPopularVideosByCategory(action.response, action.categories, state);\r\n    case WATCH_DETAILS[SUCCESS]:\r\n      return reduceWatchDetails(action.response, state);\r\n    case VIDEO_DETAILS[SUCCESS]:\r\n      return reduceVideoDetails(action.response, state);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction reduceFetchMostPopularVideos(response, prevState) {\r\n  const videoMap = response.items.reduce((accumulator, video) => {\r\n    accumulator[video.id] = video;\r\n    return accumulator;\r\n  }, {});\r\n\r\n  let items = Object.keys(videoMap);\r\n  if (response.hasOwnProperty('prevPageToken') && prevState.mostPopular) {\r\n    items = [...prevState.mostPopular.items, ...items];\r\n  }\r\n\r\n  const mostPopular = {\r\n    totalResults: response.pageInfo.totalResults,\r\n    nextPageToken: response.nextPageToken,\r\n    items,\r\n  };\r\n\r\n  return {\r\n    ...prevState,\r\n    mostPopular,\r\n    byId: {...prevState.byId, ...videoMap},\r\n  };\r\n}\r\n\r\nfunction reduceFetchVideoCategories(response, prevState) {\r\n  const categoryMapping = response.items.reduce((accumulator, category) => {\r\n    accumulator[category.id] = category.snippet.title;\r\n    return accumulator;\r\n  }, {});\r\n  return {\r\n    ...prevState,\r\n    categories: categoryMapping,\r\n  };\r\n}\r\n\r\nfunction reduceFetchMostPopularVideosByCategory(responses, categories, prevState) {\r\n  let videoMap = {};\r\n  let byCategoryMap = {};\r\n\r\n  responses.forEach((response, index) => {\r\n    // ignore answer if there was an error\r\n    if (response.status === 400) return;\r\n\r\n    const categoryId = categories[index];\r\n    const {byId, byCategory} = groupVideosByIdAndCategory(response.result);\r\n    videoMap = {...videoMap, ...byId};\r\n    byCategoryMap[categoryId] = byCategory;\r\n  });\r\n\r\n  // compute new state\r\n  return {\r\n    ...prevState,\r\n    byId: {...prevState.byId, ...videoMap},\r\n    byCategory: {...prevState.byCategory, ...byCategoryMap},\r\n  };\r\n}\r\n\r\nfunction groupVideosByIdAndCategory(response) {\r\n  const videos = response.items;\r\n  const byId = {};\r\n  const byCategory = {\r\n    totalResults: response.pageInfo.totalResults,\r\n    nextPageToken: response.nextPageToken,\r\n    items: [],\r\n  };\r\n\r\n  videos.forEach((video) => {\r\n    byId[video.id] = video;\r\n\r\n    const items = byCategory.items;\r\n    if(items && items) {\r\n      items.push(video.id);\r\n    } else {\r\n      byCategory.items = [video.id];\r\n    }\r\n  });\r\n\r\n  return {byId, byCategory};\r\n}\r\n\r\nfunction reduceWatchDetails(responses, prevState) {\r\n  const videoDetailResponse = responses.find(r => r.result.kind === VIDEO_LIST_RESPONSE);\r\n  // we know that items will only have one element\r\n  // because we explicitly asked for a video with a specific id\r\n  const video = videoDetailResponse.result.items[0];\r\n  const relatedEntry = reduceRelatedVideosRequest(responses);\r\n\r\n  return {\r\n    ...prevState,\r\n    byId: {\r\n      ...prevState.byId,\r\n      [video.id]: video\r\n    },\r\n    related: {\r\n      ...prevState.related,\r\n      [video.id]: relatedEntry\r\n    }\r\n  };\r\n}\r\n\r\nfunction reduceRelatedVideosRequest(responses) {\r\n  const relatedVideosResponse = responses.find(r => r.result.kind === SEARCH_LIST_RESPONSE);\r\n  const {pageInfo, items, nextPageToken} = relatedVideosResponse.result;\r\n  const relatedVideoIds = items.map(video => video.id.videoId);\r\n\r\n  return {\r\n    totalResults: pageInfo.totalResults,\r\n    nextPageToken,\r\n    items: relatedVideoIds\r\n  };\r\n}\r\n\r\nfunction reduceVideoDetails(responses, prevState) {\r\n  const videoResponses = responses.filter(response => response.result.kind === VIDEO_LIST_RESPONSE);\r\n  const parsedVideos = videoResponses.reduce((videoMap, response) => {\r\n    // we're explicitly asking for a video with a particular id\r\n    // so the response set must either contain 0 items (if a video with the id does not exist)\r\n    // or at most one item (i.e. the channel we've been asking for)\r\n    const video = response.result.items ? response.result.items[0] : null;\r\n    if (!video) {\r\n      return videoMap;\r\n    }\r\n    videoMap[video.id] = video;\r\n    return videoMap;\r\n  }, {});\r\n\r\n  return {\r\n    ...prevState,\r\n    byId: {...prevState.byId, ...parsedVideos},\r\n  };\r\n}\r\n\r\n/* function reduceVideoDetails(responses) {\r\n  const videoResponses = responses.filter(response => response.result.kind === VIDEO_LIST_RESPONSE);\r\n  return videoResponses.reduce((accumulator, response) => {\r\n    response.result.items.forEach(video => {\r\n      accumulator[video.id] = video;\r\n    });\r\n    return accumulator;\r\n  }, {});\r\n}\r\n\r\nfunction reduceRelatedVideos(responses, videoIds) {\r\n  const videoResponses = responses.filter(response => response.result.kind === SEARCH_LIST_RESPONSE);\r\n  return videoResponses.reduce((accumulator, response, index) => {\r\n    const relatedIds = response.result.items.map(video => video.id.videoId);\r\n    accumulator[videoIds[index]] = {\r\n      totalResults: response.result.pageInfo.totalResults,\r\n      nextPageToken: response.result.nextPageToken,\r\n      items: relatedIds\r\n    };\r\n    return accumulator;\r\n  }, {});\r\n} */\r\n\r\n\r\n/*\r\n*   Selectors\r\n* */\r\nconst getMostPopular = (state) => state.videos.mostPopular;\r\nexport const getMostPopularVideos = createSelector(\r\n  (state) => state.videos.byId,\r\n  getMostPopular,\r\n  (videosById, mostPopular) => {\r\n    if (!mostPopular || !mostPopular.items) {\r\n      return [];\r\n    }\r\n    return mostPopular.items.map(videoId => videosById[videoId]);\r\n  }\r\n);\r\nexport const getVideoCategoryIds = createSelector(\r\n  state => state.videos.categories,\r\n  (categories) => {\r\n    return Object.keys(categories || {});\r\n  }\r\n);\r\n\r\nexport const getVideosByCategory = createSelector(\r\n  state => state.videos.byCategory,\r\n  state => state.videos.byId,\r\n  state => state.videos.categories,\r\n  (videosByCategory, videosById, categories) => {\r\n    return Object.keys(videosByCategory || {}).reduce((accumulator, categoryId) => {\r\n      const videoIds = videosByCategory[categoryId].items;\r\n      const categoryTitle = categories[categoryId];\r\n      accumulator[categoryTitle] = videoIds.map(videoId => videosById[videoId]);\r\n      return accumulator;\r\n    }, {});\r\n  }\r\n);\r\n\r\nexport const videoCategoriesLoaded = createSelector(\r\n  state => state.videos.categories,\r\n  (categories) => {\r\n    return Object.keys(categories || {}).length !== 0;\r\n  }\r\n);\r\n\r\nexport const videosByCategoryLoaded = createSelector(\r\n  state => state.videos.byCategory,\r\n  (videosByCategory) => {\r\n    return Object.keys(videosByCategory || {}).length;\r\n  }\r\n);\r\n\r\nexport const getVideoById = (state, videoId) => {\r\n  return state.videos.byId[videoId];\r\n};\r\nconst getRelatedVideoIds = (state, videoId) => {\r\n  const related = state.videos.related[videoId];\r\n  return related ? related.items : [];\r\n};\r\nexport const getRelatedVideos = createSelector(\r\n  getRelatedVideoIds,\r\n  state => state.videos.byId,\r\n  (relatedVideoIds, videos) => {\r\n    if (relatedVideoIds) {\r\n      // filter kicks out null values we might have\r\n      return relatedVideoIds.map(videoId => videos[videoId]).filter(video => video);\r\n    }\r\n    return [];\r\n  });\r\n\r\nexport const getChannelId = (state, location, name) => {\r\n  const videoId = getSearchParam(location, name);\r\n  const video = state.videos.byId[videoId];\r\n  if (video) {\r\n    return video.snippet.channelId;\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const getAmountComments = createSelector(\r\n  getVideoById,\r\n  (video) => {\r\n    if (video) {\r\n      return video.statistics.commentCount;\r\n    }\r\n    return 0;\r\n  });\r\n\r\nexport const allMostPopularVideosLoaded = createSelector(\r\n  [getMostPopular],\r\n  (mostPopular) => {\r\n    const amountFetchedItems = mostPopular.items ? mostPopular.items.length : 0;\r\n    return amountFetchedItems === mostPopular.totalResults;\r\n  }\r\n);\r\n\r\nexport const getMostPopularVideosNextPageToken = createSelector(\r\n  [getMostPopular],\r\n  (mostPopular) => {\r\n    return mostPopular.nextPageToken;\r\n  }\r\n);\r\n\r\n"]},"metadata":{},"sourceType":"module"}